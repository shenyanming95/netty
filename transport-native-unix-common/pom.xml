<?xml version="1.0" encoding="UTF-8"?>

<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <artifactId>netty-transport-native-unix-common</artifactId>
  <build>
    <plugins>
      <!-- Also include c files in source jar -->
        <plugin>
        <artifactId>build-helper-maven-plugin</artifactId>
        <executions>
          <execution>
            <configuration>
              <sources>
                <source>${nativeIncludeDir}</source>
              </sources>
            </configuration>
            <goals>
              <goal>add-source</goal>
            </goals>
            <phase>generate-sources</phase>
          </execution>
        </executions>
        <groupId>org.codehaus.mojo</groupId>
      </plugin>
    </plugins>
  </build>
  <dependencies>
    <dependency>
      <artifactId>netty-common</artifactId>
      <groupId>io.netty</groupId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <artifactId>netty-buffer</artifactId>
      <groupId>io.netty</groupId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <artifactId>netty-transport</artifactId>
      <groupId>io.netty</groupId>
      <version>${project.version}</version>
    </dependency>
  </dependencies>

  <description>
    Static library which contains common unix utilities.
  </description>
  <modelVersion>4.0.0</modelVersion>
  <name>Netty/Transport/Native/Unix/Common</name>

  <packaging>jar</packaging>

  <parent>
    <artifactId>netty-parent</artifactId>
    <groupId>io.netty</groupId>
    <version>4.1.52.Final-SNAPSHOT</version>
  </parent>

  <profiles>
    <profile>
      <activation>
        <os>
          <family>mac</family>
        </os>
      </activation>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-antrun-plugin</artifactId>
            <executions>
              <!-- Build the additional JAR that contains the native library. -->
                <execution>
                <configuration>
                  <target>
                    <attachartifact classifier="${jni.classifier}" file="${nativeJarFile}" type="jar" />
                    <copy includeEmptyDirs="false" todir="${nativeJarWorkdir}">
                      <regexpmapper from="^(?:[^/]+/)*([^/]+)$" handledirsep="yes" to="META-INF/native/lib/\1" />
                      <zipfileset dir="${nativeLibOnlyDir}" />
                    </copy>
                    <copy includeEmptyDirs="false" todir="${nativeJarWorkdir}">
                      <regexpmapper from="^(?:[^/]+/)*([^/]+).h$" handledirsep="yes"
                          to="META-INF/native/include/\1.h" />
                      <zipfileset dir="${nativeIncludeDir}" />
                    </copy>
                    <copy todir="${nativeJarWorkdir}">
                      <zipfileset src="${defaultJarFile}" />
                    </copy>
                    <jar basedir="${nativeJarWorkdir}" destfile="${nativeJarFile}"
                        excludes="META-INF/MANIFEST.MF,META-INF/INDEX.LIST" index="true"
                        manifest="${nativeJarWorkdir}/META-INF/MANIFEST.MF" />
                  </target>
                </configuration>
                <goals>
                  <goal>run</goal>
                </goals>
                <id>native-jar</id>
                <phase>package</phase>
              </execution>
                <!-- invoke the make file to build a static library -->
                <execution>
                <configuration>
                  <target>
                    <exec executable="${exe.make}" failonerror="true" resolveexecutable="true">
                      <env key="CC" value="${exe.compiler}" />
                      <env key="AR" value="${exe.archiver}" />
                      <env key="LIB_DIR" value="${nativeLibOnlyDir}" />
                      <env key="OBJ_DIR" value="${nativeObjsOnlyDir}" />
                      <env key="JNI_PLATFORM" value="${jni.platform}" />
                      <env key="CFLAGS"
                          value="-O3 -Werror -Wno-attributes -fPIC -fno-omit-frame-pointer -Wunused-variable -fvisibility=hidden" />
                      <env key="LDFLAGS" value="-Wl,--no-as-needed -lrt" />
                      <env key="LIB_NAME" value="${nativeLibName}" />
                        <!-- support for __attribute__((weak_import)) by the linker was added in 10.2 so ensure we
                             explicitly set the target platform. Otherwise we may get fatal link errors due to weakly linked
                             methods which are not expected to be present on MacOS (e.g. accept4). -->
                        <env key="MACOSX_DEPLOYMENT_TARGET" value="10.2" />
                    </exec>
                  </target>
                </configuration>
                <goals>
                  <goal>run</goal>
                </goals>
                <id>build-native-lib</id>
                <phase>generate-sources</phase>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
      <id>mac</id>
      <properties>
        <exe.compiler>clang</exe.compiler>
        <jni.platform>darwin</jni.platform>
      </properties>
    </profile>
    <profile>
      <activation>
        <os>
          <family>linux</family>
        </os>
      </activation>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-antrun-plugin</artifactId>
            <executions>
              <!-- Build the additional JAR that contains the native library. -->
                <execution>
                <configuration>
                  <target>
                    <attachartifact classifier="${jni.classifier}" file="${nativeJarFile}" type="jar" />
                    <copy includeEmptyDirs="false" todir="${nativeJarWorkdir}">
                      <regexpmapper from="^(?:[^/]+/)*([^/]+)$" handledirsep="yes" to="META-INF/native/lib/\1" />
                      <zipfileset dir="${nativeLibOnlyDir}" />
                    </copy>
                    <copy includeEmptyDirs="false" todir="${nativeJarWorkdir}">
                      <regexpmapper from="^(?:[^/]+/)*([^/]+).h$" handledirsep="yes"
                          to="META-INF/native/include/\1.h" />
                      <zipfileset dir="${nativeIncludeDir}" />
                    </copy>
                    <copy todir="${nativeJarWorkdir}">
                      <zipfileset src="${defaultJarFile}" />
                    </copy>
                    <jar basedir="${nativeJarWorkdir}" destfile="${nativeJarFile}"
                        excludes="META-INF/MANIFEST.MF,META-INF/INDEX.LIST" index="true"
                        manifest="${nativeJarWorkdir}/META-INF/MANIFEST.MF" />
                  </target>
                </configuration>
                <goals>
                  <goal>run</goal>
                </goals>
                <id>native-jar</id>
                <phase>package</phase>
              </execution>
                <!-- invoke the make file to build a static library -->
                <execution>
                <configuration>
                  <target>
                    <exec executable="${exe.make}" failonerror="true" resolveexecutable="true">
                      <env key="CC" value="${exe.compiler}" />
                      <env key="AR" value="${exe.archiver}" />
                      <env key="LIB_DIR" value="${nativeLibOnlyDir}" />
                      <env key="OBJ_DIR" value="${nativeObjsOnlyDir}" />
                      <env key="JNI_PLATFORM" value="${jni.platform}" />
                      <env key="CFLAGS"
                          value="-O3 -Werror -Wno-attributes -fPIC -fno-omit-frame-pointer -Wunused-variable -fvisibility=hidden" />
                      <env key="LDFLAGS" value="-Wl,--no-as-needed -lrt" />
                      <env key="LIB_NAME" value="${nativeLibName}" />
                    </exec>
                  </target>
                </configuration>
                <goals>
                  <goal>run</goal>
                </goals>
                <id>build-native-lib</id>
                <phase>generate-sources</phase>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
      <id>linux</id>
      <properties>
        <jni.platform>linux</jni.platform>
      </properties>
    </profile>
    <profile>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-antrun-plugin</artifactId>
            <executions>
              <!-- Build the additional JAR that contains the native library. -->
                <execution>
                <configuration>
                  <target>
                    <attachartifact classifier="${jni.classifier}" file="${nativeJarFile}" type="jar" />
                    <copy includeEmptyDirs="false" todir="${nativeJarWorkdir}">
                      <regexpmapper from="^(?:[^/]+/)*([^/]+)$" handledirsep="yes" to="META-INF/native/lib/\1" />
                      <zipfileset dir="${nativeLibOnlyDir}" />
                    </copy>
                    <copy includeEmptyDirs="false" todir="${nativeJarWorkdir}">
                      <regexpmapper from="^(?:[^/]+/)*([^/]+).h$" handledirsep="yes"
                          to="META-INF/native/include/\1.h" />
                      <zipfileset dir="${nativeIncludeDir}" />
                    </copy>
                    <copy todir="${nativeJarWorkdir}">
                      <zipfileset src="${defaultJarFile}" />
                    </copy>
                    <jar basedir="${nativeJarWorkdir}" destfile="${nativeJarFile}"
                        excludes="META-INF/MANIFEST.MF,META-INF/INDEX.LIST" index="true"
                        manifest="${nativeJarWorkdir}/META-INF/MANIFEST.MF" />
                  </target>
                </configuration>
                <goals>
                  <goal>run</goal>
                </goals>
                <id>native-jar</id>
                <phase>package</phase>
              </execution>
                <!-- invoke the make file to build a static library -->
                <execution>
                <configuration>
                  <target>
                    <exec executable="${exe.make}" failonerror="true" resolveexecutable="true">
                      <env key="CC" value="${exe.compiler}" />
                      <env key="AR" value="${exe.archiver}" />
                      <env key="LIB_DIR" value="${nativeLibOnlyDir}" />
                      <env key="OBJ_DIR" value="${nativeObjsOnlyDir}" />
                      <env key="JNI_PLATFORM" value="${jni.platform}" />
                      <env key="CFLAGS"
                          value="-O3 -Werror -Wno-attributes -fPIC -fno-omit-frame-pointer -Wunused-variable -fvisibility=hidden" />
                      <env key="LDFLAGS" value="-Wl,--no-as-needed -lrt" />
                      <env key="LIB_NAME" value="${nativeLibName}" />
                    </exec>
                  </target>
                </configuration>
                <goals>
                  <goal>run</goal>
                </goals>
                <id>build-native-lib</id>
                <phase>generate-sources</phase>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
      <id>linux-aarch64</id>
      <properties>
        <exe.archiver>aarch64-linux-gnu-ar</exe.archiver>
        <exe.compiler>aarch64-linux-gnu-gcc</exe.compiler>
        <jni.classifier>${os.detected.name}-aarch64</jni.classifier>
        <jni.platform>linux</jni.platform>
      </properties>
    </profile>
    <profile>
      <activation>
        <os>
          <family>unix</family>
          <name>freebsd</name>
        </os>
      </activation>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-antrun-plugin</artifactId>
            <executions>
              <!-- Build the additional JAR that contains the native library. -->
                <execution>
                <configuration>
                  <target>
                    <attachartifact classifier="${jni.classifier}" file="${nativeJarFile}" type="jar" />
                    <copy includeEmptyDirs="false" todir="${nativeJarWorkdir}">
                      <regexpmapper from="^(?:[^/]+/)*([^/]+)$" handledirsep="yes" to="META-INF/native/lib/\1" />
                      <zipfileset dir="${nativeLibOnlyDir}" />
                    </copy>
                    <copy includeEmptyDirs="false" todir="${nativeJarWorkdir}">
                      <regexpmapper from="^(?:[^/]+/)*([^/]+).h$" handledirsep="yes"
                          to="META-INF/native/include/\1.h" />
                      <zipfileset dir="${nativeIncludeDir}" />
                    </copy>
                    <copy todir="${nativeJarWorkdir}">
                      <zipfileset src="${defaultJarFile}" />
                    </copy>
                    <jar basedir="${nativeJarWorkdir}" destfile="${nativeJarFile}"
                        excludes="META-INF/MANIFEST.MF,META-INF/INDEX.LIST" index="true"
                        manifest="${nativeJarWorkdir}/META-INF/MANIFEST.MF" />
                  </target>
                </configuration>
                <goals>
                  <goal>run</goal>
                </goals>
                <id>native-jar</id>
                <phase>package</phase>
              </execution>
                <!-- invoke the make file to build a static library -->
                <execution>
                <configuration>
                  <target>
                    <exec executable="${exe.make}" failonerror="true" resolveexecutable="true">
                      <env key="CC" value="${exe.compiler}" />
                      <env key="AR" value="${exe.archiver}" />
                      <env key="LIB_DIR" value="${nativeLibOnlyDir}" />
                      <env key="OBJ_DIR" value="${nativeObjsOnlyDir}" />
                      <env key="JNI_PLATFORM" value="${jni.platform}" />
                      <env key="CFLAGS"
                          value="-O3 -Werror -Wno-attributes -fPIC -fno-omit-frame-pointer -Wunused-variable -fvisibility=hidden" />
                      <env key="LDFLAGS" value="-Wl,--no-as-needed -lrt" />
                      <env key="LIB_NAME" value="${nativeLibName}" />
                    </exec>
                  </target>
                </configuration>
                <goals>
                  <goal>run</goal>
                </goals>
                <id>build-native-lib</id>
                <phase>generate-sources</phase>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
      <id>freebsd</id>
      <properties>
        <exe.compiler>clang</exe.compiler>
        <exe.make>gmake</exe.make>
        <jni.platform>freebsd</jni.platform>
      </properties>
    </profile>
    <profile>
      <activation>
        <os>
          <family>unix</family>
          <name>openbsd</name>
        </os>
      </activation>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-antrun-plugin</artifactId>
            <executions>
              <!-- Build the additional JAR that contains the native library. -->
                <execution>
                <configuration>
                  <target>
                    <attachartifact classifier="${jni.classifier}" file="${nativeJarFile}" type="jar" />
                    <copy includeEmptyDirs="false" todir="${nativeJarWorkdir}">
                      <regexpmapper from="^(?:[^/]+/)*([^/]+)$" handledirsep="yes" to="META-INF/native/lib/\1" />
                      <zipfileset dir="${nativeLibOnlyDir}" />
                    </copy>
                    <copy includeEmptyDirs="false" todir="${nativeJarWorkdir}">
                      <regexpmapper from="^(?:[^/]+/)*([^/]+).h$" handledirsep="yes"
                          to="META-INF/native/include/\1.h" />
                      <zipfileset dir="${nativeIncludeDir}" />
                    </copy>
                    <copy todir="${nativeJarWorkdir}">
                      <zipfileset src="${defaultJarFile}" />
                    </copy>
                    <jar basedir="${nativeJarWorkdir}" destfile="${nativeJarFile}"
                        excludes="META-INF/MANIFEST.MF,META-INF/INDEX.LIST" index="true"
                        manifest="${nativeJarWorkdir}/META-INF/MANIFEST.MF" />
                  </target>
                </configuration>
                <goals>
                  <goal>run</goal>
                </goals>
                <id>native-jar</id>
                <phase>package</phase>
              </execution>
                <!-- invoke the make file to build a static library -->
                <execution>
                <configuration>
                  <target>
                    <exec executable="${exe.make}" failonerror="true" resolveexecutable="true">
                      <env key="CC" value="${exe.compiler}" />
                      <env key="AR" value="${exe.archiver}" />
                      <env key="LIB_DIR" value="${nativeLibOnlyDir}" />
                      <env key="OBJ_DIR" value="${nativeObjsOnlyDir}" />
                      <env key="JNI_PLATFORM" value="${jni.platform}" />
                      <env key="CFLAGS"
                          value="-O3 -Werror -Wno-attributes -fPIC -fno-omit-frame-pointer -Wunused-variable -fvisibility=hidden" />
                      <env key="LDFLAGS" value="-Wl,--no-as-needed -lrt" />
                      <env key="LIB_NAME" value="${nativeLibName}" />
                    </exec>
                  </target>
                </configuration>
                <goals>
                  <goal>run</goal>
                </goals>
                <id>build-native-lib</id>
                <phase>generate-sources</phase>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
      <id>openbsd</id>
      <properties>
        <exe.compiler>clang</exe.compiler>
        <exe.make>gmake</exe.make>
        <jni.platform>openbsd</jni.platform>
      </properties>
    </profile>
  </profiles>

  <properties>
    <defaultJarFile>${project.build.directory}/${project.build.finalName}.jar</defaultJarFile>

    <exe.archiver>ar</exe.archiver>
    <exe.compiler>gcc</exe.compiler>
    <exe.make>make</exe.make>
    <javaModuleName>io.netty.transport.unix.common</javaModuleName>
    <nativeIncludeDir>${project.basedir}/src/main/c</nativeIncludeDir>
    <nativeJarFile>${project.build.directory}/${project.build.finalName}-${jni.classifier}.jar</nativeJarFile>
    <nativeJarWorkdir>${project.build.directory}/native-jar-work</nativeJarWorkdir>
    <nativeLibName>libnetty-unix-common</nativeLibName>
    <nativeLibOnlyDir>${project.build.directory}/native-lib-only</nativeLibOnlyDir>
    <nativeObjsOnlyDir>${project.build.directory}/native-objs-only</nativeObjsOnlyDir>
  </properties>
</project>
