<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2012 The Netty Project
  ~
  ~ The Netty Project licenses this file to you under the Apache License,
  ~ version 2.0 (the "License"); you may not use this file except in compliance
  ~ with the License. You may obtain a copy of the License at:
  ~
  ~   http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  ~ WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
  ~ License for the specific language governing permissions and limitations
  ~ under the License.
  -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.sonatype.oss</groupId>
    <artifactId>oss-parent</artifactId>
    <version>9</version>
  </parent>

  <groupId>io.netty</groupId>
  <artifactId>netty-parent</artifactId>
  <packaging>pom</packaging>
  <version>4.1.52.Final-SNAPSHOT</version>

  <name>Netty</name>
  <url>https://netty.io/</url>
  <description>
    Netty is an asynchronous event-driven network application framework for
    rapid development of maintainable high performance protocol servers and
    clients.
  </description>

  <organization>
    <name>The Netty Project</name>
    <url>https://netty.io/</url>
  </organization>

  <licenses>
    <license>
      <name>Apache License, Version 2.0</name>
      <url>http://www.apache.org/licenses/LICENSE-2.0</url>
    </license>
  </licenses>
  <inceptionYear>2008</inceptionYear>

  <scm>
    <url>https://github.com/netty/netty</url>
    <connection>scm:git:git://github.com/netty/netty.git</connection>
    <developerConnection>scm:git:ssh://git@github.com/netty/netty.git</developerConnection>
    <tag>HEAD</tag>
  </scm>

  <developers>
    <developer>
      <id>netty.io</id>
      <name>The Netty Project Contributors</name>
      <email>netty@googlegroups.com</email>
      <url>https://netty.io/</url>
      <organization>The Netty Project</organization>
      <organizationUrl>https://netty.io/</organizationUrl>
    </developer>
  </developers>

  <profiles>
    <profile>
      <id>not_x86_64</id>
      <activation>
        <os>
          <arch>!x86_64</arch>
        </os>
      </activation>
      <properties>
        <!-- Use no classifier as we only support x86_64 atm-->
        <tcnative.classifier />
        <skipShadingTestsuite>true</skipShadingTestsuite>
      </properties>
    </profile>

    <!-- Detect if we use GraalVM and if so enable the native image testsuite -->
    <profile>
      <id>graal</id>
      <activation>
        <file>
          <!-- GraalVM Component Updater should exists when using GraalVM-->
          <exists>${java.home}/bin/gu</exists>
        </file>
      </activation>
      <properties>
        <skipNativeImageTestsuite>false</skipNativeImageTestsuite>
        <forbiddenapis.skip>true</forbiddenapis.skip>
        <testJvm />
      </properties>
    </profile>
    <!-- JDK15 -->
    <profile>
      <id>java15</id>
      <activation>
        <jdk>15</jdk>
      </activation>
      <properties>
        <!-- Not use alpn agent as Java11+ supports alpn out of the box -->
        <argLine.alpnAgent />
        <forbiddenapis.skip>true</forbiddenapis.skip>
        <!-- Needed because of https://issues.apache.org/jira/browse/MENFORCER-275 -->
        <enforcer.plugin.version>3.0.0-M3</enforcer.plugin.version>
        <!-- 1.4.x does not work in Java10+ -->
        <jboss.marshalling.version>2.0.5.Final</jboss.marshalling.version>
        <!-- This is the minimum supported by Java12+ -->
        <maven.compiler.source>1.7</maven.compiler.source>
        <maven.compiler.target>1.7</maven.compiler.target>
        <!-- pax-exam does not work on latest Java12 EA 22 build -->
        <skipOsgiTestsuite>true</skipOsgiTestsuite>
      </properties>
    </profile>
    <!-- JDK14 -->
    <profile>
      <id>java14</id>
      <activation>
        <jdk>14</jdk>
      </activation>
      <properties>
        <!-- Not use alpn agent as Java11+ supports alpn out of the box -->
        <argLine.alpnAgent />
        <forbiddenapis.skip>true</forbiddenapis.skip>
        <!-- Needed because of https://issues.apache.org/jira/browse/MENFORCER-275 -->
        <enforcer.plugin.version>3.0.0-M3</enforcer.plugin.version>
        <!-- 1.4.x does not work in Java10+ -->
        <jboss.marshalling.version>2.0.5.Final</jboss.marshalling.version>
        <!-- This is the minimum supported by Java12+ -->
        <maven.compiler.source>1.7</maven.compiler.source>
        <maven.compiler.target>1.7</maven.compiler.target>
        <!-- pax-exam does not work on latest Java12 EA 22 build -->
        <skipOsgiTestsuite>true</skipOsgiTestsuite>
      </properties>
    </profile>
    <!-- JDK13 -->
    <profile>
      <id>java13</id>
      <activation>
        <jdk>13</jdk>
      </activation>
      <properties>
        <!-- Not use alpn agent as Java11+ supports alpn out of the box -->
        <argLine.alpnAgent />
        <forbiddenapis.skip>true</forbiddenapis.skip>
        <!-- Needed because of https://issues.apache.org/jira/browse/MENFORCER-275 -->
        <enforcer.plugin.version>3.0.0-M3</enforcer.plugin.version>
        <!-- 1.4.x does not work in Java10+ -->
        <jboss.marshalling.version>2.0.5.Final</jboss.marshalling.version>
        <!-- This is the minimum supported by Java12+ -->
        <maven.compiler.source>1.7</maven.compiler.source>
        <maven.compiler.target>1.7</maven.compiler.target>
        <!-- pax-exam does not work on latest Java12 EA 22 build -->
        <skipOsgiTestsuite>true</skipOsgiTestsuite>
      </properties>
    </profile>

    <!-- JDK12 -->
    <profile>
      <id>java12</id>
      <activation>
        <jdk>12</jdk>
      </activation>
      <properties>
        <argLine.java9.extras />
        <!-- Export some stuff which is used during our tests -->
        <argLine.java9>--illegal-access=deny ${argLine.java9.extras}</argLine.java9>
        <!-- Not use alpn agent as Java11+ supports alpn out of the box -->
        <argLine.alpnAgent />
        <forbiddenapis.skip>true</forbiddenapis.skip>
        <!-- Needed because of https://issues.apache.org/jira/browse/MENFORCER-275 -->
        <enforcer.plugin.version>3.0.0-M3</enforcer.plugin.version>
        <!-- 1.4.x does not work in Java10+ -->
        <jboss.marshalling.version>2.0.5.Final</jboss.marshalling.version>
        <!-- This is the minimum supported by Java12+ -->
        <maven.compiler.source>1.7</maven.compiler.source>
        <maven.compiler.target>1.7</maven.compiler.target>
        <!-- pax-exam does not work on latest Java12 EA 22 build -->
        <skipOsgiTestsuite>true</skipOsgiTestsuite>
      </properties>
    </profile>

    <!-- JDK11 -->
    <profile>
      <id>java11</id>
      <activation>
        <jdk>11</jdk>
      </activation>
      <properties>
        <argLine.java9.extras />
        <!-- Export some stuff which is used during our tests -->
        <argLine.java9>--illegal-access=deny ${argLine.java9.extras}</argLine.java9>
        <!-- Not use alpn agent as Java11+ supports alpn out of the box -->
        <argLine.alpnAgent />
        <forbiddenapis.skip>true</forbiddenapis.skip>
        <!-- Needed because of https://issues.apache.org/jira/browse/MENFORCER-275 -->
        <enforcer.plugin.version>3.0.0-M3</enforcer.plugin.version>
        <!-- 1.4.x does not work in Java10+ -->
        <jboss.marshalling.version>2.0.5.Final</jboss.marshalling.version>
        <!-- pax-exam does not work on latest Java11 build -->
        <skipOsgiTestsuite>true</skipOsgiTestsuite>
      </properties>
    </profile>

    <!-- JDK10 -->
    <profile>
      <id>java10</id>
      <activation>
        <jdk>10</jdk>
      </activation>
      <properties>
        <argLine.java9.extras />
        <!-- Export some stuff which is used during our tests -->
        <argLine.java9>--illegal-access=deny --add-modules java.xml.bind ${argLine.java9.extras}</argLine.java9>
        <!-- Not use alpn agent as Java10 supports alpn out of the box -->
        <argLine.alpnAgent />
        <forbiddenapis.skip>true</forbiddenapis.skip>
        <!-- Needed because of https://issues.apache.org/jira/browse/MENFORCER-275 -->
        <enforcer.plugin.version>3.0.0-M3</enforcer.plugin.version>
        <!-- 1.4.x does not work in Java10+ -->
        <jboss.marshalling.version>2.0.5.Final</jboss.marshalling.version>
      </properties>
    </profile>

    <!-- JDK9 -->
    <profile>
      <id>java9</id>
      <properties>
        <argLine.java9.extras />
        <!-- Export some stuff which is used during our tests -->
        <argLine.java9>--illegal-access=deny --add-modules java.xml.bind ${argLine.java9.extras}</argLine.java9>
        <!-- Not use alpn agent as Java9 supports alpn out of the box -->
        <argLine.alpnAgent />
        <!-- Skip as maven plugin not works with Java9 yet -->
        <forbiddenapis.skip>true</forbiddenapis.skip>
        <!-- Needed because of https://issues.apache.org/jira/browse/MENFORCER-275 -->
        <enforcer.plugin.version>3.0.0-M1</enforcer.plugin.version>
      </properties>
      <activation>
        <jdk>9</jdk>
      </activation>
    </profile>

    <profile>
      <id>boringssl</id>
      <properties>
        <tcnative.artifactId>netty-tcnative-boringssl-static</tcnative.artifactId>
        <tcnative.classifier />
      </properties>
    </profile>
    <profile>
      <id>leak</id>
      <properties>
        <argLine.leak>-Dio.netty.leakDetectionLevel=paranoid -Dio.netty.leakDetection.targetRecords=32</argLine.leak>
      </properties>
    </profile>
    <profile>
      <id>noPrintGC</id>
      <properties>
        <argLine.printGC>-D_</argLine.printGC>
      </properties>
    </profile>
    <profile>
      <id>noUnsafe</id>
      <properties>
        <argLine.noUnsafe>-Dio.netty.noUnsafe=true</argLine.noUnsafe>
      </properties>
    </profile>
    <profile>
      <id>jdk8</id>
      <activation>
        <jdk>[1.8,)</jdk>
      </activation>
      <properties>
        <!-- Our Javadoc has poor enough quality to fail the build thanks to JDK8 javadoc which got more strict. -->
        <maven.javadoc.failOnError>false</maven.javadoc.failOnError>
      </properties>
    </profile>
    <profile>
      <!--
      This profile exists because either ALPN or NPN can exits on the class path at once, but not both.
      The JDK version is typically used to distinguish which should be used but there is some overlap
      where both could be used.  ALPN is the default and this profile is enabled with a -Dforcenpn=true arugument
      -->
      <id>forcenpn</id>
      <activation>
        <property>
          <name>forcenpn</name>
          <value>true</value>
        </property>
      </activation>
      <properties>
        <jetty.alpnAgent.option>forceNpn=true</jetty.alpnAgent.option>
      </properties>
    </profile>
  </profiles>

  <properties>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
    <netty.dev.tools.directory>${project.build.directory}/dev-tools</netty.dev.tools.directory>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <netty.build.version>26</netty.build.version>
    <jboss.marshalling.version>1.4.11.Final</jboss.marshalling.version>
    <jetty.alpnAgent.version>2.0.10</jetty.alpnAgent.version>
    <jetty.alpnAgent.path>"${settings.localRepository}"/org/mortbay/jetty/alpn/jetty-alpn-agent/${jetty.alpnAgent.version}/jetty-alpn-agent-${jetty.alpnAgent.version}.jar</jetty.alpnAgent.path>
    <jetty.alpnAgent.option></jetty.alpnAgent.option>
    <argLine.common>
      -server
      -dsa -da -ea:io.netty...
      -XX:+HeapDumpOnOutOfMemoryError
    </argLine.common>
    <!-- Default to ALPN. See forcenpn profile to force NPN -->
    <argLine.alpnAgent>-javaagent:${jetty.alpnAgent.path}=${jetty.alpnAgent.option}</argLine.alpnAgent>
    <argLine.leak>-D_</argLine.leak> <!-- Overridden when 'leak' profile is active -->
    <argLine.noUnsafe>-D_</argLine.noUnsafe> <!-- Overridden when 'noUnsafe' profile is active -->
    <argLine.coverage>-D_</argLine.coverage> <!-- Overridden when 'coverage' profile is active -->
    <argLine.printGC>-XX:+PrintGCDetails</argLine.printGC>
    <argLine.java9 /> <!-- Overridden when 'java9' profile is active -->
    <argLine.javaProperties>-D_</argLine.javaProperties>
    <!-- Configure the os-maven-plugin extension to expand the classifier on                  -->
    <!-- Fedora-"like" systems. This is currently only used for the netty-tcnative dependency -->
    <osmaven.version>1.6.2</osmaven.version>
    <!-- keep in sync with PlatformDependent#ALLOWED_LINUX_OS_CLASSIFIERS -->
    <os.detection.classifierWithLikes>fedora,suse,arch</os.detection.classifierWithLikes>
    <tcnative.artifactId>netty-tcnative</tcnative.artifactId>
    <tcnative.version>2.0.34.Final</tcnative.version>
    <tcnative.classifier>${os.detected.classifier}</tcnative.classifier>
    <conscrypt.groupId>org.conscrypt</conscrypt.groupId>
    <conscrypt.artifactId>conscrypt-openjdk-uber</conscrypt.artifactId>
    <conscrypt.version>2.4.0</conscrypt.version>
    <conscrypt.classifier />
    <jni.classifier>${os.detected.name}-${os.detected.arch}</jni.classifier>
    <logging.config>${project.basedir}/../common/src/test/resources/logback-test.xml</logging.config>
    <logging.logLevel>debug</logging.logLevel>
    <log4j2.version>2.6.2</log4j2.version>
    <enforcer.plugin.version>1.4.1</enforcer.plugin.version>
    <testJavaHome>${java.home}</testJavaHome>
    <testJvm>${testJavaHome}/bin/java</testJvm>
    <skipOsgiTestsuite>false</skipOsgiTestsuite>
    <skipAutobahnTestsuite>false</skipAutobahnTestsuite>
    <skipHttp2Testsuite>false</skipHttp2Testsuite>
    <skipJapicmp>false</skipJapicmp>
    <graalvm.version>19.0.0</graalvm.version>
    <!-- By default skip native testsuite as it requires a custom environment with graalvm installed -->
    <skipNativeImageTestsuite>true</skipNativeImageTestsuite>
    <skipShadingTestsuite>false</skipShadingTestsuite>
  </properties>

  <modules>
    <module>all</module>
    <module>dev-tools</module>
    <module>common</module>
    <module>buffer</module>
    <module>codec</module>
    <module>codec-dns</module>
    <module>codec-haproxy</module>
    <module>codec-http</module>
    <module>codec-http2</module>
    <module>codec-memcache</module>
    <module>codec-mqtt</module>
    <module>codec-redis</module>
    <module>codec-smtp</module>
    <module>codec-socks</module>
    <module>codec-stomp</module>
    <module>codec-xml</module>
    <module>resolver</module>
    <module>resolver-dns</module>
    <module>resolver-dns-native-macos</module>
    <module>tarball</module>
    <module>transport</module>
    <module>transport-native-unix-common-tests</module>
    <module>transport-native-unix-common</module>
    <module>transport-native-epoll</module>
    <module>transport-native-kqueue</module>
    <module>transport-rxtx</module>
    <module>transport-sctp</module>
    <module>transport-udt</module>
    <module>handler</module>
    <module>handler-proxy</module>
    <module>example</module>
    <module>microbench</module>
    <module>bom</module>
    <module>testsuite</module>
    <module>testsuite-autobahn</module>
    <module>testsuite-http2</module>
    <module>testsuite-osgi</module>
    <module>testsuite-shading</module>
    <module>testsuite-native-image</module>
    <module>transport-blockhound-tests</module>
  </modules>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>${project.groupId}</groupId>
        <artifactId>netty-dev-tools</artifactId>
        <version>${project.version}</version>
      </dependency>

      <!-- Needed for java11 and later as javax.activation is not part of the JDK anymore -->
      <dependency>
        <groupId>com.sun.activation</groupId>
        <artifactId>javax.activation</artifactId>
        <version>1.2.0</version>
      </dependency>

      <!-- Byte code generator - completely optional -->
      <dependency>
        <groupId>org.javassist</groupId>
        <artifactId>javassist</artifactId>
        <version>3.20.0-GA</version>
        <scope>compile</scope>
        <optional>true</optional>
      </dependency>

      <!-- JBoss Marshalling - completely optional -->
      <dependency>
        <groupId>org.jboss.marshalling</groupId>
        <artifactId>jboss-marshalling</artifactId>
        <version>${jboss.marshalling.version}</version>
        <scope>compile</scope>
        <optional>true</optional>
      </dependency>

      <!-- SPDY and HTTP/2 - completely optional -->
      <dependency>
        <groupId>org.eclipse.jetty.npn</groupId>
        <artifactId>npn-api</artifactId>
        <version>1.1.1.v20141010</version>
        <scope>provided</scope> <!-- Provided by npn-boot -->
      </dependency>
      <dependency>
        <groupId>org.eclipse.jetty.alpn</groupId>
        <artifactId>alpn-api</artifactId>
        <version>1.1.2.v20150522</version>
        <scope>provided</scope> <!-- Provided by alpn-boot -->
      </dependency>

      <!-- Google Protocol Buffers - completely optional -->
      <dependency>
        <groupId>com.google.protobuf</groupId>
        <artifactId>protobuf-java</artifactId>
        <version>2.6.1</version>
      </dependency>
      <dependency>
        <groupId>com.google.protobuf.nano</groupId>
        <artifactId>protobuf-javanano</artifactId>
        <version>3.0.0-alpha-5</version>
      </dependency>

      <!-- Our own Tomcat Native fork - completely optional, used for accelerating SSL with OpenSSL. -->
      <dependency>
        <groupId>${project.groupId}</groupId>
        <artifactId>${tcnative.artifactId}</artifactId>
        <version>${tcnative.version}</version>
        <classifier>${tcnative.classifier}</classifier>
        <scope>compile</scope>
        <optional>true</optional>
      </dependency>

      <!-- Conscrypt - needed for running tests, used for acclerating SSL with OpenSSL. -->
      <dependency>
        <groupId>${conscrypt.groupId}</groupId>
        <artifactId>${conscrypt.artifactId}</artifactId>
        <classifier>${conscrypt.classifier}</classifier>
        <version>${conscrypt.version}</version>
        <scope>compile</scope>
        <optional>true</optional>
      </dependency>

      <!--
        Bouncy Castle - completely optional, only needed when:
        - you generate a temporary self-signed certificate using SelfSignedCertificate, and
        - you don't use the JDK which doesn't provide sun.security.x509 package.
      -->
      <dependency>
        <groupId>org.bouncycastle</groupId>
        <artifactId>bcpkix-jdk15on</artifactId>
        <version>1.65</version>
        <scope>compile</scope>
        <optional>true</optional>
      </dependency>

      <!--
        Completely optional and only needed for OCSP stapling to construct and
        parse OCSP requests and responses.
      -->
      <dependency>
        <groupId>org.bouncycastle</groupId>
        <artifactId>bcprov-jdk15on</artifactId>
        <version>1.54</version>
        <scope>compile</scope>
        <optional>true</optional>
      </dependency>

      <dependency>
        <groupId>com.fasterxml</groupId>
        <artifactId>aalto-xml</artifactId>
        <version>1.0.0</version>
      </dependency>

      <dependency>
        <groupId>com.jcraft</groupId>
        <artifactId>jzlib</artifactId>
        <version>1.1.3</version>
      </dependency>
      <dependency>
        <groupId>com.ning</groupId>
        <artifactId>compress-lzf</artifactId>
        <version>1.0.3</version>
      </dependency>
      <dependency>
        <groupId>net.jpountz.lz4</groupId>
        <artifactId>lz4</artifactId>
        <version>1.3.0</version>
      </dependency>
      <dependency>
        <groupId>com.github.jponge</groupId>
        <artifactId>lzma-java</artifactId>
        <version>1.3</version>
      </dependency>

      <!-- Java concurrency tools for the JVM -->
      <dependency>
        <groupId>org.jctools</groupId>
        <artifactId>jctools-core</artifactId>
        <version>3.1.0</version>
      </dependency>

      <dependency>
        <groupId>org.rxtx</groupId>
        <artifactId>rxtx</artifactId>
        <version>2.1.7</version>
      </dependency>

      <dependency>
        <groupId>com.barchart.udt</groupId>
        <artifactId>barchart-udt-bundle</artifactId>
        <version>2.3.0</version>
      </dependency>

      <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>servlet-api</artifactId>
        <version>2.5</version>
      </dependency>

      <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-api</artifactId>
        <version>1.7.21</version>
      </dependency>
      <dependency>
        <groupId>commons-logging</groupId>
        <artifactId>commons-logging</artifactId>
        <version>1.2</version>
      </dependency>
      <dependency>
        <groupId>org.apache.logging.log4j</groupId>
        <artifactId>log4j-api</artifactId>
        <version>${log4j2.version}</version>
      </dependency>
      <dependency>
        <groupId>log4j</groupId>
        <artifactId>log4j</artifactId>
        <version>1.2.17</version>
        <exclusions>
          <exclusion>
            <artifactId>mail</artifactId>
            <groupId>javax.mail</groupId>
          </exclusion>
          <exclusion>
            <artifactId>jms</artifactId>
            <groupId>javax.jms</groupId>
          </exclusion>
          <exclusion>
            <artifactId>jmxtools</artifactId>
            <groupId>com.sun.jdmk</groupId>
          </exclusion>
          <exclusion>
            <artifactId>jmxri</artifactId>
            <groupId>com.sun.jmx</groupId>
          </exclusion>
        </exclusions>
        <optional>true</optional>
      </dependency>

      <!-- Metrics providers -->
      <dependency>
        <groupId>com.yammer.metrics</groupId>
        <artifactId>metrics-core</artifactId>
        <version>2.2.0</version>
      </dependency>

      <!-- Common test dependencies -->
      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.12</version>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>${project.groupId}</groupId>
        <artifactId>netty-build</artifactId>
        <version>${netty.build.version}</version>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>org.hamcrest</groupId>
        <artifactId>hamcrest-library</artifactId>
        <version>1.3</version>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>org.mockito</groupId>
        <artifactId>mockito-core</artifactId>
        <version>2.18.3</version>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>ch.qos.logback</groupId>
        <artifactId>logback-classic</artifactId>
        <version>1.1.7</version>
        <scope>test</scope>
      </dependency>

      <!-- Test dependencies for jboss marshalling encoder/decoder -->
      <dependency>
        <groupId>org.jboss.marshalling</groupId>
        <artifactId>jboss-marshalling-serial</artifactId>
        <version>${jboss.marshalling.version}</version>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>org.jboss.marshalling</groupId>
        <artifactId>jboss-marshalling-river</artifactId>
        <version>${jboss.marshalling.version}</version>
        <scope>test</scope>
      </dependency>

      <!-- Test dependencies for microbench -->
      <dependency>
        <groupId>com.google.caliper</groupId>
        <artifactId>caliper</artifactId>
        <version>0.5-rc1</version>
        <scope>test</scope>
      </dependency>

      <!-- Test dependency for Bzip2 compression codec -->
      <dependency>
        <groupId>org.apache.commons</groupId>
        <artifactId>commons-compress</artifactId>
        <version>1.19</version>
        <scope>test</scope>
      </dependency>

      <!-- Test dependency used by http/2 hpack -->
      <dependency>
        <groupId>com.google.code.gson</groupId>
        <artifactId>gson</artifactId>
        <version>2.7</version>
        <scope>test</scope>
      </dependency>

      <!-- Test suite dependency for generating a compressed heap dump file -->
      <dependency>
        <groupId>org.tukaani</groupId>
        <artifactId>xz</artifactId>
        <version>1.5</version>
      </dependency>

      <!-- Test dependency for resolver-dns -->
      <dependency>
        <groupId>org.apache.directory.server</groupId>
        <artifactId>apacheds-protocol-dns</artifactId>
        <version>1.5.7</version>
        <scope>test</scope>
      </dependency>

      <!-- Test dependency for log4j2 tests -->
      <dependency>
        <groupId>org.apache.logging.log4j</groupId>
        <artifactId>log4j-core</artifactId>
        <version>${log4j2.version}</version>
        <scope>test</scope>
      </dependency>

      <!-- BlockHound integration -->
      <dependency>
        <groupId>io.projectreactor.tools</groupId>
        <artifactId>blockhound</artifactId>
        <version>1.0.3.RELEASE</version>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <!-- Enable Javassist support for all test runs -->
    <dependency>
      <groupId>org.javassist</groupId>
      <artifactId>javassist</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- Testing frameworks and related dependencies -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>netty-build</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-library</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.6.0</version>
            <configuration>
                <source>1.8</source>
                <target>1.8</target>
            </configuration>
        </plugin>
    </plugins>
  </build>

</project>
