<?xml version="1.0" encoding="UTF-8"?>

<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <artifactId>netty-resolver-dns-native-macos</artifactId>
  <build>
    <plugins>
      <plugin>
        <artifactId>maven-jar-plugin</artifactId>
        <executions>
          <!-- Generate the fallback JAR that does not contain the native library. -->
            <execution>
            <configuration>
              <excludes>
                <exclude>META-INF/native/**</exclude>
              </excludes>
            </configuration>
            <id>default-jar</id>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  <dependencies>
    <dependency>
      <artifactId>netty-common</artifactId>
      <groupId>io.netty</groupId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <artifactId>netty-resolver-dns</artifactId>
      <groupId>io.netty</groupId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <artifactId>netty-transport-native-unix-common</artifactId>
      <groupId>io.netty</groupId>
      <version>${project.version}</version>
    </dependency>
  </dependencies>

  <modelVersion>4.0.0</modelVersion>
  <name>Netty/Resolver/DNS/MacOS</name>

  <packaging>jar</packaging>

  <parent>
    <artifactId>netty-parent</artifactId>
    <groupId>io.netty</groupId>
    <version>4.1.52.Final-SNAPSHOT</version>
  </parent>

  <profiles>
    <profile>
      <activation>
        <os>
          <family>mac</family>
        </os>
      </activation>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
              <!-- unpack the unix-common static library and include files -->
                <execution>
                <configuration>
                  <classifier>${jni.classifier}</classifier>
                  <includeArtifactIds>netty-transport-native-unix-common</includeArtifactIds>
                  <includeGroupIds>${project.groupId}</includeGroupIds>
                  <includes>META-INF/native/**</includes>
                  <outputDirectory>${unix.common.lib.dir}</outputDirectory>
                  <overWriteReleases>false</overWriteReleases>
                  <overWriteSnapshots>true</overWriteSnapshots>
                </configuration>
                <goals>
                  <goal>unpack-dependencies</goal>
                </goals>
                <id>unpack</id>
                <phase>generate-sources</phase>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <artifactId>maven-hawtjni-plugin</artifactId>
            <executions>
              <execution>
                <configuration>
                  <configureArgs>
                    <arg>${jni.compiler.args.ldflags}</arg>
                    <arg>${jni.compiler.args.cflags}</arg>
                  </configureArgs>
                  <libDirectory>${project.build.outputDirectory}</libDirectory>
                  <name>netty_resolver_dns_native_macos_${os.detected.arch}</name>
                    <!-- We use Maven's artifact classifier instead.
                         This hack will make the hawtjni plugin to put the native library
                         under 'META-INF/native' rather than 'META-INF/native/${platform}'. -->
                    <nativeSourceDirectory>${project.basedir}/src/main/c</nativeSourceDirectory>
                  <platform>.</platform>
                </configuration>
                <goals>
                  <goal>generate</goal>
                  <goal>build</goal>
                </goals>
                <id>build-native-lib</id>
              </execution>
            </executions>
            <groupId>org.fusesource.hawtjni</groupId>
          </plugin>

          <plugin>
            <artifactId>maven-jar-plugin</artifactId>
            <executions>
              <!-- Generate the JAR that contains the native library in it. -->
                <execution>
                <configuration>
                  <archive>
                    <index>true</index>
                    <manifest>
                      <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                    </manifest>
                    <manifestEntries>
                      <Automatic-Module-Name>${javaModuleName}</Automatic-Module-Name>
                      <Bundle-NativeCode>META-INF/native/libnetty_resolver_dns_native_macos_${os.detected.arch}.jnilib; osname=MacOSX, processor=${os.detected.arch}"</Bundle-NativeCode>
                    </manifestEntries>
                    <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>
                  </archive>
                  <classifier>${jni.classifier}</classifier>
                </configuration>
                <goals>
                  <goal>jar</goal>
                </goals>
                <id>native-jar</id>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
      <dependencies>
        <dependency>
          <artifactId>netty-transport-native-unix-common</artifactId>
          <classifier>${jni.classifier}</classifier>
          <groupId>io.netty</groupId>
          <optional>true</optional>
            <!--
            The unix-common with classifier dependency is optional because it is not a runtime dependency, but a build time
            dependency to get the static library which is built directly into the shared library generated by this project.
            -->
            <version>${project.version}</version>
        </dependency>
      </dependencies>
      <id>mac</id>
      <properties>
        <jni.compiler.args.ldflags>LDFLAGS=-Wl,-weak_library,${unix.common.lib.unpacked.dir}/lib${unix.common.lib.name}.a</jni.compiler.args.ldflags>
        <skipTests>false</skipTests>
      </properties>
    </profile>
  </profiles>

  <properties>
    <javaModuleName>io.netty.resolver.dns.macos</javaModuleName>
      <!-- Needed as we use SelfSignedCertificate in our tests -->
      <jni.compiler.args.cflags>CFLAGS=-O3 -Werror -fno-omit-frame-pointer -Wunused-variable -fvisibility=hidden -I${unix.common.include.unpacked.dir}</jni.compiler.args.cflags>
    <jni.compiler.args.ldflags>LDFLAGS=-z now -L${unix.common.lib.unpacked.dir} -Wl,--whole-archive -l${unix.common.lib.name} -Wl,--no-whole-archive</jni.compiler.args.ldflags>
    <unix.common.include.unpacked.dir>${unix.common.lib.dir}/META-INF/native/include</unix.common.include.unpacked.dir>
    <unix.common.lib.dir>${project.build.directory}/unix-common-lib</unix.common.lib.dir>
    <unix.common.lib.name>netty-unix-common</unix.common.lib.name>
    <unix.common.lib.unpacked.dir>${unix.common.lib.dir}/META-INF/native/lib</unix.common.lib.unpacked.dir>
  </properties>
</project>

